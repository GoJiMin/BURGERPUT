plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
//
//	id 'com.github.node-gradle.node' version '3.4.0'	// add for npm



}

group = 'sample'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//selenium setting
	implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'

	//Spring test Sl4fj
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//JSON Data parsing dependency
	implementation('org.springframework.boot:spring-boot-starter-web')

	//=========DB셋
	//JPA, 스프링 데이터 JPA 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//H2 데이터베이스 추가
	runtimeOnly 'com.h2database:h2'

//	//For using mysql
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'



//	//For using mysql
//	implementation 'mysql:mysql-connector-java'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}

tasks.named('test') {
	useJUnitPlatform()
}

//jar Settings
//bootJar {
//	mainClass = 'burgerput.project.BurgerputProjectApplication'
//}

//react - Spring boot Settings

def reactDir = "$projectDir/src/main/frontend";

sourceSets{
	main{
		resources{
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources{
	dependsOn "copyReactBuildFiles"
}

task installReact(type:Exec){
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP

	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	}else{
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type:Exec){
	dependsOn "installReact"
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP

	if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
//		commandLine "npm.cmd", "audit", "fix" // added
		commandLine "npm.cmd", "run-script", "build"
	}else{
//		commandLine "npm.cmd", "audit", "fix" //added
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type:Copy){
	dependsOn "buildReact"
	from "$reactDir/build"
	into "$projectDir/src/main/resources/static"
}

tasks.bootJar {
	dependsOn "copyReactBuildFiles"
}

//node {
//	version = '17.6.0'
//	npmVersion = '8.5.1'
//	download = true
//	nodeProjectDir = file('${projectDir}/src/main/resources/static')
//}
/**
 * npm install start
 */


